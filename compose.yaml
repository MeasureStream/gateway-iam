services:

  postgres:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=mydatabase'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    ports:
      - '5432'
    networks:
      app_network:
        ipv4_address: 172.20.0.20

  sensor-manager:
    image: 'docker.io/christiand9699/sensor-manager:0.0.1-SNAPSHOT'
    depends_on:
      - postgres
    expose:
      - '8080'
    environment:
      - 'SPRING_DATASOURCE_URL=jdbc:postgresql://postgres/mydatabase'
      - 'SPRING_DATASOURCE_USERNAME=myuser'
      - 'SPRING_DATASOURCE_PASSWORD=secret'
    networks:
      app_network:
        ipv4_address: 172.20.0.10

  mongodb:
    image: 'mongo:latest'
    environment:
      - 'MONGO_INITDB_DATABASE=mydatabase'
      - 'MONGO_INITDB_ROOT_PASSWORD=secret'
      - 'MONGO_INITDB_ROOT_USERNAME=root'
    ports:
      - '27017:27017'
    networks:
      app_network:
        ipv4_address: 172.20.0.23
    volumes:
      - mongo_data:/data/db
      - ./mongod.conf:/etc/mongo/mongod.conf
    command: ["mongod", "--config", "/etc/mongo/mongod.conf"]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.runCommand('ping').ok" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  measure-manager:
    image: 'docker.io/christiand9699/measure:0.0.1-SNAPSHOT'
    depends_on:
      mongodb:
        condition: service_healthy
    expose:
      - '8080'
    environment:
      - 'SPRING_DATA_MONGODB_URI=mongodb://root:secret@172.20.0.23:27017/mydatabase?authSource=admin'
    networks:
      app_network:
        ipv4_address: 172.20.0.11

  keycloak-db:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=keycloak'
      - 'POSTGRES_USER=keycloak'
      - 'POSTGRES_PASSWORD=keycloakpassword'
    volumes:
      - keycloak-db-data:/var/lib/postgresql/data
    ports:
      - '5433:5432'
    networks:
      app_network:
        ipv4_address: 172.20.0.21

  keycloak:
    image: keycloak/keycloak
    depends_on:
      - keycloak-db
    environment:
      - 'KEYCLOAK_ADMIN=admin'
      - 'KEYCLOAK_ADMIN_PASSWORD=admin'
      - 'KC_DB=postgres'
      - 'KC_DB_URL=jdbc:postgresql://keycloak-db/keycloak'
      - 'KC_DB_USERNAME=keycloak'
      - 'KC_DB_PASSWORD=keycloakpassword'
    ports:
      - '9090:8080'
    command: [ "start-dev" ]
    networks:
      app_network:
        ipv4_address: 172.20.0.22
    healthcheck:
      test: [ "CMD-SHELL", "exec 3<> /dev/tcp/127.0.0.1/9000; echo -e 'GET /health/ready HTTP/1.1\\r\\nhost: http://localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3; if [ $? -eq 0 ]; then echo 'Healthcheck Successful'; exit 0; else echo 'Healthcheck Failed'; exit 1; fi;" ]
      interval: 15s
      retries: 15
      start_period: 5s
      timeout: 2s

  grafana:
    image: grafana/grafana-enterprise
    #restart: always
    volumes:
      - grafana_data:/var/lib/grafana
      - /var/lib/grafana/plugins
      - ./grafana.ini:/etc/grafana/grafana.ini
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=yesoreyeram-infinity-datasource
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_SECURITY_ALLOW_EMBEDDING=true

    networks:
      app_network:
        ipv4_address: 172.20.0.30

#  grafana:
#    build:
#      context: .
#      dockerfile: DockerfileGrafana
#    restart: always
#    volumes:
#      - ./data:/var/lib/grafana
#      - /var/lib/grafana/plugins
#    ports:
#      - 3000:3000
# Esponi la porta 3000 per accedere a Grafana
#    networks:
#      app_network:
#        ipv4_address: 172.20.0.30


#  frontend:
#    image: frontend:latest
#    ports:
#      - "5173:5173"
#    environment:
#      NODE_ENV: development
#    stdin_open: true
#    tty: true
#    command: ["npm", "run", "dev", "--", "--host"]
#    networks:
#      app_network:
#        ipv4_address: 172.20.0.12



volumes:
  postgres-data:
  keycloak-db-data:
  mongo_data:
  grafana_data:

networks:
  app_network:
    ipam:
      config:
        - subnet: 172.20.0.0/24
